(define (recur_length x)
(define (in? element sequence)
  (and (not (null? sequence))
	   (or  (equal? element (car sequence)) 
	        (in? element (cdr sequence)))))

(define (cons_consult_remainder divident divider)
 (let ((consult (floor (/ divident divider))))
  (cons consult (- divident (* divider consult)))))

(define sequence '())
(define (Recurring m n)
 (let ((current (cons_consult_remainder m n)))
  (cond ((or (= (cdr current) 0) (in? current sequence))  (set! sequence (cons current sequence))
														  (Recurring_Length (car sequence) (cdr sequence)))
	    (else  (set! sequence (cons current sequence))
			   (Recurring (* 10 (cdr current)) n)))))
(define (Recurring_Length element sequence)
  (cond ((null? sequence) -99999)
	    ((equal? element (car sequence)) 1)
		(else (+ 1 (Recurring_Length element (cdr sequence))))))
(Recurring 1 x))

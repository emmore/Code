(define (prime? m)
 (define (fantasy_test n)
  (define (f_test x)
   (if (<= (* x x) n)
	(and (not (or (= (remainder n x) 0) (= (remainder n (+ x 2)) 0)))
	     (f_test (+ x 6)))
    #t))
  (f_test 5))
 (cond ((<= m 1) #f)
       ((<= m 3) #t)
	   ((or (= (remainder m 2) 0)
		    (= (remainder m 3) 0))
			#f)
	   (else (fantasy_test m))))


(define (prime_length cs)
 (let ((a (car cs))
	   (b (cdr cs)))
 (define (prime_length_test x)
  (if (prime? (+ (* x x) (* a x) b))
   (+ 1 (prime_length_test (+ x 1)))
   0))
 (prime_length_test 1)))

(define (cross a b)
  (if (null? a)
   '()
   (let ((c (car a)))
	(append (map (lambda(x) (cons c x)) b)
	        (cross (cdr a) b)))))


(define (enumerate a b)
 (if (> a b)
  '()
  (cons a (enumerate (+ a 1) b))))

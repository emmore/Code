#!/bin/sh

#==============================================================================

# File: "schemes", Time-stamp: <2009-08-07 12:19:07 feeley>

# Copyright (c) 2006-2009 by Marc Feeley, All Rights Reserved.

#==============================================================================
# Information on Scheme systems supported by this script in alphabetical order.

SCRIPT_VERSION="v0.0.1"

root_dir="`pwd`"

SYSTEMS_SUPPORTED=""
INSTALL_PATH=""

add_system() # system, url
{
  SYSTEMS_SUPPORTED="$SYSTEMS_SUPPORTED $1"
  eval "URL_$1=\"$2\""
}

add_path() # path
{
  INSTALL_PATH="$INSTALL_PATH$1:"
}

#------------------------------------------------------------------------------
# bigloo

add_system bigloo "http://www-sop.inria.fr/mimosa/fp/Bigloo/"

query_bigloo()
{
  query bigloo -rx "[Bb]igloo (???)"
}

download_bigloo()
{
  download_dist_latest_first bigloo "bigloo.*\.tar\.gz"
}

install_bigloo()
{
  unpack_dist_and_configure_and_install bigloo "bigloo*" "*"
}

#------------------------------------------------------------------------------
# chez

# Chez is not available freely.
#add_system chez "http://www.scheme.com/download/"

query_chez()
{
  query_chez() {
    query chez -label "Chez Scheme" -rx "[Vv]ersion ???" "$@"
  }

  query_chez -exe "chez-scheme"
  query_chez -exe "scheme"
}

download_chez()
{
  download_dist_latest_first chez "csv.*-i3osx\.tar\.gz"
}

install_chez()
{
echo  unpack_dist_and_configure_and_install chez "csv*" "*"
}

#------------------------------------------------------------------------------
# chicken

add_system chicken "http://www.call-with-current-continuation.org/"

query_chicken()
{
  query chicken -exe "csi" -rx "[Vv]ersion ???"
  query chicken_comp -exe "csc" -flags "-version" -rx "[Vv]ersion ???"
}

download_chicken()
{
  platform=linux # default platform

  case "$HOST_PLATFORM" in
    Darwin* | darwin* )
      platform=macosx
      ;;
    OpenBSD* | openbsd* )
      platform=bsd
      ;;
    MINGW* | mingw* )
      platform=mingw-msys
      ;;
    Cygwin* | cygwin* )
      platform=cygwin
      ;;
    Solaris* | solaris* )
      platform=solaris
      ;;
  esac

  download_dist_latest_first chicken "chicken-.*\.tar\.gz"
}

install_chicken()
{
  if unpack_dist chicken "chicken-*" tmp; then
    cd "$root_dir/tmp/chicken/"*
    make PLATFORM=$platform PREFIX=$root_dir/sys/chicken install
    add_path "$root_dir/sys/chicken/bin"
  fi
  cd "$root_dir"
}

#------------------------------------------------------------------------------
# gambit

add_system gambit "http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Main_Page"

query_gambit()
{
  query_gambit() {
    sym="gambit"; if [ "$1" = "comp" ]; then sym="${sym}_$1"; shift; fi
    query "$sym" -flags "-:d-" -input ",q" -rx "Gambit v???"  -vrx "[0-9][0-9A-Za-z.+]*\( beta [0-9][0-9]*\)*" "$@"
  }

  query_gambit      -exe "gsi"
  query_gambit comp -exe "gambit-gsc"
  query_gambit comp -exe "gsc"
}

download_gambit()
{
  download_dist_latest_first gambit "gambc-v.*\.tgz"
}

install_gambit()
{
  unpack_dist_and_configure_and_install gambit "gambc-v*" "*" "--enable-single-host --enable-char-size=1"
}

#------------------------------------------------------------------------------
# gauche

add_system gauche "http://practical-scheme.net/gauche/download.html"

query_gauche()
{
  query gauche -exe "gosh" -flags "-V" -rx "[Vv]ersion ???"
}

download_gauche()
{
  download_dist_latest_first gauche "Gauche-.*\.tgz"
}

install_gauche()
{
  unpack_dist_and_configure_and_install gauche "Gauche-*" "*"
}

#------------------------------------------------------------------------------
# guile

# Guile requires the GMP library to be installed (and the lightweight threads library?)
#add_system guile "http://www.gnu.org/software/guile/"

query_guile()
{
  query_guile() {
    query guile -exe "guile$1" -flags "-v" -rx "[Gg]uile ??? Copy"
  }

  query_guile ""
  query_guile "-2.0"
  query_guile "-1.9"
  query_guile "-1.8"
  query_guile "-1.7"
  query_guile "-1.6"
  query_guile "-1.5"
  query_guile "-1.4"
}

download_guile()
{
  download_dist_latest_first guile "ftp\.gnu\.org.*guile-.*\.tar\.gz"
}

install_guile()
{
  unpack_dist_and_configure_and_install guile "guile-*" "*"
}

#------------------------------------------------------------------------------
# ikarus

# Ikarus requires the GMP library to be installed and a SSE2 capable processor.
#add_system ikarus "http://ikarus-scheme.org/"

query_ikarus()
{
  query ikarus -rx "[Ii]karus v???"
}

download_ikarus()
{
  download_dist_latest_first ikarus "ikarus-.*\.tar\.gz"
}

install_ikarus()
{
  unpack_dist_and_configure_and_install ikarus "ikarus-*" "*"
}

#------------------------------------------------------------------------------
# kawa

add_system kawa "http://www.gnu.org/software/kawa/Getting-Kawa.html"

query_kawa()
{
  query kawa -flags "--version" -rx "[Kk]awa ???"
}

download_kawa()
{
  download_dist_latest_first kawa "kawa-.*\.tar\.gz"
}

install_kawa()
{
  unpack_dist_and_configure_and_install kawa "kawa-*" "*"
}

#------------------------------------------------------------------------------
# larceny

add_system larceny "http://www.ccs.neu.edu/home/will/Larceny/download.html"

query_larceny()
{
  query larceny -rx "[Ll]arceny v???"
}

download_larceny()
{
  platform="larceny-.*-bin-native-ia32-linux86\.tar\.gz" # default platform

  case "$HOST_PLATFORM" in
    Darwin* | darwin* )
      platform="larceny-.*-bin-native-ia32-macosx\.tar\.gz"
      ;;
    MINGW* | mingw* | Cygwin* | cygwin* )
      platform="larceny-.*-bin-native-ia32-win32\.tar\.gz"
      ;;
    Solaris* | solaris* )
      platform="larceny-.*-bin-native-sparc-solaris\.tar\.gz"
      ;;
  esac

  download_dist_latest_first larceny "$platform"
}

install_larceny()
{
  if unpack_dist larceny "larceny*" sys; then
    cd "$root_dir/sys/larceny/"larceny*
    add_path "$root_dir/sys/larceny/"larceny*
  fi
  cd "$root_dir"
}

#------------------------------------------------------------------------------
# mit

# MIT-Scheme source distribution seems to be broken, so try binary distribution.
add_system mit "http://www.gnu.org/software/mit-scheme/"

query_mit()
{
  query_mit() {
    query mit -label "MIT Scheme" -exe "$1" \
          -rx "[Rr]elease ???" -vrx "[0-9][0-9A-Za-z.+]*"
  }

  query_mit "mit-scheme"
  query_mit "scheme"
}

download_mit()
{
#  platform="mit-scheme-[0-9][0-9]*\.tar\.gz" # default to sources

  case "$HOST_PLATFORM" in
    Darwin*i386 | darwin*i386 )
      platform="mit-scheme-[0-9][0-9]*.*-ix86-apple-darwin\.tar\.gz"
      ;;
    Linux* | linux* | FreeBSD* | freebsd* | OpenBSD* | openbsd* )
      platform="mit-scheme-[0-9][0-9]*.*-ix86-gnu-linux\.tar\.gz"
      ;;
    MINGW* | mingw* | Cygwin* | cygwin* )
      platform="mit-scheme-[0-9][0-9]*.*-ix86-win32\.exe"
      ;;
  esac

  download_dist_latest_first mit "$platform"
}

install_mit()
{
#  if unpack_dist mit "mit-scheme-*" sys; then
#    cd "$root_dir/tmp/mit/"*
#    cd "src"
#    ./configure "--prefix=$root_dir/sys/mit"
#    make install
#    add_path "$root_dir/sys/mit/bin"
#  fi

  if unpack_dist mit "mit-scheme-*" sys; then
    add_path "$root_dir/sys/mit/bin"
  fi
}

#------------------------------------------------------------------------------
# mzscheme

add_system mzscheme "http://download.plt-scheme.org/bundles/4.2/mz/"

query_mzscheme()
{
  query mzscheme -label "MzScheme" -flags "-qv" -rx "[Vv]ersion ???,"
  query mzscheme -label "MzScheme" -flags "-qv" -rx "MzScheme v???"
}

download_mzscheme()
{
  download_dist_latest_first mzscheme "mz-.*-src-unix\.tgz"
}

install_mzscheme()
{
  case "$HOST_PLATFORM" in
    Darwin* | darwin* )
      special_conf_opts="--enable-xonx"
      ;;
    * )
      special_conf_opts=""
      ;;
  esac

  if unpack_dist mzscheme "mz-*" tmp; then
    cd "$root_dir/tmp/mzscheme/"*
    cd "src"
    mkdir build
    cd build
    ../configure "--prefix=$root_dir/sys/mzscheme" $special_conf_opts
    make
    make install
    add_path "$root_dir/sys/mzscheme/bin"
  fi
  cd "$root_dir"
}

#------------------------------------------------------------------------------
# petite

# Petite Chez requires "sudo" and does not obey the --installprefix flag.
#add_system petite "http://www.scheme.com/download/"

query_petite()
{
  query petite -label "Petite Chez Scheme" -rx "[Vv]ersion ???"
}

download_petite()
{
  platform="pcsv.*-i3le\.tar\.gz" # default platform

  case "$HOST_PLATFORM" in
    Darwin*i386 | darwin*i386 )
      platform="pcsv.*-i3osx\.tar\.gz"
      ;;
    Darwin*ppc | darwin*ppc )
      platform="pcsv.*-ppcosx\.tar\.gz"
      ;;
    FreeBSD* | freebsd* )
      platform="pcsv.*-i3fb\.tar\.gz"
      ;;
    OpenBSD* | openbsd* )
      platform="pcsv.*-i3ob\.tar\.gz"
      ;;
    MINGW* | mingw* | Cygwin* | cygwin* )
      platform="tpcsv*\.exe"
      ;;
    Solaris*32 | solaris*32 )
      platform="pcsv.*-sps2\.tar\.gz"
      ;;
    Solaris*64 | solaris*64 )
      platform="pcsv.*-sp64\.tar\.gz"
      ;;
  esac

  download_dist_latest_first petite "$platform"
}

install_petite()
{
  if unpack_dist petite "pcsv*" tmp; then
    cd "$root_dir/tmp/petite/"*
    cd "custom"
    ./configure "--installprefix=$root_dir/sys/petite" --force-relink
    sudo make install
    add_path "$root_dir/sys/petite/bin"
  fi
  cd "$root_dir"
}

#------------------------------------------------------------------------------
# rscheme

# Unfortunately www.rscheme.org seems to be down.
#add_system rscheme "http://www.rscheme.org/"

query_rscheme()
{
  query rscheme -exe "rs" -rx "RScheme (v???,"
}

download_rscheme()
{
  download_dist_latest_first rscheme "rs-.*\.tar\.gz"
}

install_rscheme()
{
  unpack_dist_and_configure_and_install rscheme "rs-*" "*"
}

#------------------------------------------------------------------------------
# scheme48

add_system scheme48 "http://s48.org/1.8/download.html"

query_scheme48()
{
  query scheme48 -input ",exit" -rx "[Ss]cheme 48 ???"
}

download_scheme48()
{
  download_dist_latest_first scheme48 "scheme48-.*\.tgz"
}

install_scheme48()
{
  unpack_dist_and_configure_and_install scheme48 "scheme48-*" "*"
}

#------------------------------------------------------------------------------
# scm

add_system scm "http://people.csail.mit.edu/jaffer/SCM.html"

query_scm()
{
  query scm -label "SCM" -flags "--version" -rx "scm ???"
}

download_scm()
{
  download_dist_latest_first scm "scm-.*\.zip"
  download_dist_latest_first scm "slib-.*\.zip"
}

install_scm()
{
  if unpack_dist scm "scm*" sys; then
    if unpack_dist scm "slib*" sys; then
      cd "$root_dir/sys/scm/"scm*
      make
      add_path "$root_dir/sys/scm/"scm*
    fi
  fi
  cd "$root_dir"
}

#------------------------------------------------------------------------------
# scsh

add_system scsh "http://www.scsh.net/download/download.html"

query_scsh()
{
  query scsh -input ",exit" -rx "[Ss]csh ???"
}

download_scsh()
{
  download_dist_latest_first scsh "scsh-.*\.tar\.gz"
}

install_scsh()
{
  unpack_dist_and_configure_and_install scsh "scsh-*" "*"
}

#------------------------------------------------------------------------------
# sisc

add_system sisc "http://sisc-scheme.org/"

query_sisc()
{
  query sisc -label "SISC" -rx "SISC (???"
}

download_sisc()
{
  download_dist_latest_first sisc "sisc-.*\.tar\.gz"
}

install_sisc()
{
  if unpack_dist sisc "sisc*" sys; then
    cd "$root_dir/sys/sisc/"sisc*
    add_path "$root_dir/sys/sisc/"sisc*
  fi
  cd "$root_dir"
}

#------------------------------------------------------------------------------
# stalin

# Stalin's compilation by the C compiler is too long.
add_system stalin "http://cobweb.ecn.purdue.edu/~qobi/software.html"

query_stalin()
{
  query stalin -flags "-version" -rx "???" -vrx "[0-9][0-9]*\\.[0-9][0-9]*"
 }

download_stalin()
{
  download_dist_latest_first stalin "stalin.*\.tar\.Z"
}

install_stalin()
{
  if unpack_dist stalin "stalin*" sys; then
    cd "$root_dir/sys/stalin/"*
    ./build
    add_path "`pwd`"
  fi
  cd "$root_dir"
}

#------------------------------------------------------------------------------
# stklos

add_system stklos "ftp://kaolin.essi.fr/pub/STklos/"

query_stklos()
{
  query stklos -label "STklos" -flags "--version" -rx "[Vv]ersion ???"
}

download_stklos()
{
  download_dist_oldest_first stklos "stklos-.*\.tar\.gz"
}

install_stklos()
{
  unpack_dist_and_configure_and_install stklos "stklos-*" "*"
}

#------------------------------------------------------------------------------
# ypsilon

# Ypsilon does not obey the --prefix flag.
#add_system ypsilon "http://code.google.com/p/ypsilon/downloads/list"

query_ypsilon()
{
  query ypsilon -label "Ypsilon" -flags "--version" -rx "[Vv]ersion ???"
}

download_ypsilon()
{
  download_dist_latest_first ypsilon "ypsilon-[0-9]*\.[0-9]*\.[0-9]*\.tar\.gz"
}

install_ypsilon()
{
  unpack_dist_and_configure_and_install ypsilon "ypsilon-*" "*"
}

#==============================================================================
# Search for the Scheme systems accessible on this machine.

# The code for detecting the Scheme systems has been contributed
# by Eli Barzilay, December 2006.  Please report any bugs directly
# to him at eli@barzilay.org and to feeley@iro.umontreal.ca .

find_in_path() # exe-name, sets `$exe'
{
  save_IFS="${IFS}"; IFS=":"
  for dir in $PATH; do
    if test -x "$dir/$1" -a ! -d "$dir/$1"; then
      exe="$dir/$1"; IFS="$save_IFS"; return 0
    fi
  done
  exe=""; IFS="$save_IFS"; return 1
}

#------------------------------------------------------------------------------
# Configuration

# TODO: command-line argument for these
verbose="no" # yes/no/very
show_symbols="n"
show_names="y"
show_versions="y"
show_paths="y"

#------------------------------------------------------------------------------
# Helpers

exit_error()
{
  echo "$@" 1>&2
  exit 1
}

maybe_printf()
{
  if [ "$verbose" != "no" ]; then
    printf "$@"
  fi
}

not_in() # name, set_of_names
{
  name="$1"
  set_of_names="$2"
  set x $set_of_names; shift
  for i
  do
    if [ "$i" = "$name" ]; then return 1; fi
  done
  return 0
}

NL='
'

query() # sym, keyword: arg ...
{
  # a convenient interface to test_system: `sym' is the symbolic
  # identifier that identifies the system; additional arguments are
  # provided as `-key' keywords:
  # -label the human label that the system is known as; defaults to
  #        `Foo' if the sym is `foo', and `Foo compiler' if the sym is
  #        `foo_comp'
  # -exe   the executable name, defaults to the sym
  # -flags flags that should be passed on to the executable; defaults
  #        to nothing
  # -input input line that should be sent to the executable; defaults
  #        to nothing (which will use /dev/null)
  # -rx    the expected sed regexp which will be matched against the
  #        output of the executable (newlines converted to spaces),
  #        with `???' (three question marks) appearing (exactly once)
  #        where the version string is expected; this argument is
  #        required
  # -vrx   the expected version string regexp which will be used where
  #        the above has `???'; defaults to `[0-9][0-9A-Za-z.]+'
  sym="$1"; shift
  human=""
  exe=""
  flags=""
  input=""
  rx=""
  vrx="[0-9][0-9A-Za-z.]*"
  while true; do
    case "$1" in
      "" ) break ;;
      "-label" ) human="$2" ; shift 2 ;;
      "-exe"   ) exe="$2"   ; shift 2 ;;
      "-flags" ) flags="$2" ; shift 2 ;;
      "-input" ) input="$2" ; shift 2 ;;
      "-rx"    ) rx="$2"    ; shift 2 ;;
      "-vrx"   ) vrx="$2"   ; shift 2 ;;
      * ) exit_error "t: Unexpected argument: \"$1\"" ;;
    esac
  done
  if [ "x$human" = "x" ]; then
    human="`echo \"$sym\" | cut -c -1 | tr 'a-z' 'A-Z'`"
    human="${human}`echo \"$sym\" | cut -c 2-`"
    human="`echo \"$human\" | sed -e 's/_comp$/ compiler/'`"
  fi
  if [ "x$exe" = "x" ]; then exe="$sym"; fi
  if [ "x$rx" = "x" ]; then
    exit_error "t: no -rx specified"
  else
    rx1="`echo \"$rx\" | sed -e 's/???.*$//'`"
    rx2="`echo \"$rx\" | sed -e 's/^.*???//'`"
    rx="${rx1}"'\('"$vrx"'\)'"${rx2}"
  fi
  if not_in "$sym" "$ALL_SYSTEMS"; then
    ALL_SYSTEMS="$ALL_SYSTEMS $sym"
  fi
  # run the test
  if not_in "$sym" "$SYSTEMS_FOUND" && find_in_path "$exe"; then
    if [ "$verbose" = "very" ]; then echo "... trying $exe"; fi
    if [ "x$input" = "x" ]; then
      out="`\"$exe\" $flags < /dev/null 2>&1`"
    else
      out="`echo \"$input\" | \"$exe\" $flags 2>&1`"
    fi
    # add some prefix text so if there's a version match then the sed result is
    # always going to be different (for limited sed's with no way to `else
    # delete the whole thing')
    out="output: `echo \"$out\" | tr \"$NL\" \" \"`"
    ver="`echo \"$out\" | sed -e 's&^.*'\"$rx\"'.*$&\1&'`"
    if [ "x$ver" != "x$out" ]; then
      if [ "$verbose" != "no" ]; then p="  ";
      else p=""; fi
      if [ "$show_versions" = "y" ]; then lbl="$human $ver";
      else lbl="$human"; fi
      case "$show_symbols$show_names$show_paths" in
        yyy ) printf "  $p%-14s %-22s -> %s\n" "[$sym]" "$lbl" "$exe" ;;
        yyn ) printf "  $p%-14s %s\n" "[$sym]" "$lbl" ;;
        yny ) printf "  $p%-14s %s\n" "$sym:" "$exe" ;;
        ynn ) printf "  $p%s\n" "$sym" ;;
        nyy ) printf "  $p%-22s -> %s\n" "$lbl" "$exe" ;;
        nyn ) printf "  $p%s\n" "$lbl" ;;
        nny ) printf "  $p%s\n" "$exe" ;;
        nnn ) : ;;
        * ) exit_error "t: bad printout settings" ;;
      esac
      SYSTEMS_FOUND="$SYSTEMS_FOUND $sym"
      eval "PROGRAM_$sym='$exe'"
      eval "VERSION_$sym='$ver'"
    fi
  fi
}

query_systems()
{
  echo "Searching for the Scheme systems accessible in the current PATH:"

  # Iterate through list of supported Scheme systems:

  SYSTEMS_FOUND=""
  ALL_SYSTEMS=""

  for sym in $SYSTEMS_SUPPORTED; do
    eval "query_$sym"
  done

  SYSTEMS_NOT_FOUND=""

  for sym in $SYSTEMS_SUPPORTED; do
    if not_in "$sym" "$SYSTEMS_FOUND"; then
      SYSTEMS_NOT_FOUND="$SYSTEMS_NOT_FOUND $sym"
    fi
  done
}

#------------------------------------------------------------------------------
# Give installation information for Scheme systems that were not found.

give_installation_info()
{
  if [ "x$SYSTEMS_NOT_FOUND" != "x" ]; then
    echo
    echo "These systems were not found (you might want to check the URL to install them):"
    for sym in $SYSTEMS_NOT_FOUND; do
      eval "url=\"\$URL_$sym\""
      printf "  %-10s -> %s\n" "$sym" "$url"
    done
  fi
}

#------------------------------------------------------------------------------
# Check the version numbers to do a quick filtering of Scheme system
# versions that are known not to work.

split_version() # version, sets `$ver1', `$ver2', and `$ver3'
{
  ver0="`echo \"$1\" | sed -e 's& beta &.&'`"
  ver1="`echo \"$ver0\".. | sed -e 's&\([0-9]\)\([a-zA-Z]\)&\1.\2&g' -e 's&\([a-zA-Z]\)\([0-9]\)&\1.\2&g' -e 's&\([^.]*\)\.\([^.]*\)\.\([^.]*\).*&\1&'`"
  ver2="`echo \"$ver0\".. | sed -e 's&\([0-9]\)\([a-zA-Z]\)&\1.\2&g' -e 's&\([a-zA-Z]\)\([0-9]\)&\1.\2&g' -e 's&\([^.]*\)\.\([^.]*\)\.\([^.]*\).*&\2&'`"
  ver3="`echo \"$ver0\".. | sed -e 's&\([0-9]\)\([a-zA-Z]\)&\1.\2&g' -e 's&\([a-zA-Z]\)\([0-9]\)&\1.\2&g' -e 's&\([^.]*\)\.\([^.]*\)\.\([^.]*\).*&\3&'`"
}

compare_versions() # sym, min_version
{
  # compare the version of the system `sym' with `min_version'.

  split_version "$2"
  min_ver1="$ver1"
  min_ver2="$ver2"
  min_ver3="$ver3"

  eval "ver=\"\$VERSION_$1\""
  split_version "$ver"

  compat=1

  if [ "x$ver1" != "x" ]; then

    if [ "$ver1" \< "A" ]; then
      if [ "$ver1" -lt "$min_ver1" ]; then
        compat=0
      fi
    else
      if [ "$ver1" \< "$min_ver1" ]; then
        compat=0
      fi
    fi
    if [ "$compat" = "1" ]; then
      if [ "x$ver1" = "x$min_ver1" ]; then
        if [ "x$min_ver2" != "x" ]; then
          if [ "x$ver2" = "x" ]; then
            compat=0
          else
            if [ "$ver2" \< "A" ]; then
              if [ "$ver2" -lt "$min_ver2" ]; then
                compat=0
              fi
            else
              if [ "$ver2" \< "$min_ver2" ]; then
                compat=0
              fi
            fi
            if [ "$compat" = "1" ]; then
              if [ "x$ver2" = "x$min_ver2" ]; then
                if [ "x$min_ver3" != "x" ]; then
                  if [ "x$ver3" = "x" ]; then
                    compat=0
                  else
                    if [ "$ver3" \< "A" ]; then
                      if [ "$ver3" -lt "$min_ver3" ]; then
                        compat=0
                      fi
                    else
                      if [ "$ver3" \< "$min_ver3" ]; then
                        compat=0
                      fi
                    fi
                  fi
                fi
              fi
            fi
          fi
        fi
      fi
    fi

  fi
}

check_min_version() # sym, min_version, keyword: arg ...
{
  # checks that the version of the system is acceptable: `sym' is the
  # symbolic identifier that identifies the system; min_version is the
  # oldest acceptable version; additional arguments are provided as
  # `-key' keywords:
  # -label the human label that the system is known as; defaults to
  #        `Foo' if the sym is `foo', and `Foo compiler' if the sym is
  #        `foo_comp'

  sym="$1"; shift
  min_ver="$1"; shift
  human=""

  while true; do
    case "$1" in
      "" ) break ;;
      "-label" ) human="$2" ; shift 2 ;;
      * ) exit_error "check_version: Unexpected argument: \"$1\"" ;;
    esac
  done

  if [ "x$human" = "x" ]; then
    human="`echo \"$sym\" | cut -c -1 | tr 'a-z' 'A-Z'`"
    human="${human}`echo \"$sym\" | cut -c 2-`"
    human="`echo \"$human\" | sed -e 's/_comp$/ compiler/'`"
  fi

  compare_versions "$sym" "$min_ver"

  if [ "x$ver1" = "x" ]; then
    MISSING_SCHEME_SYSTEMS="$MISSING_SCHEME_SYSTEMS $sym"
  else
    if [ "$compat" != "1" ]; then
      if [ "$min_ver1" = "9999" ]; then
        echo "*** $human is not supported"
      else
        echo "*** $human $ver is not supported (need at least version $min_ver)"
        MISSING_SCHEME_SYSTEMS="$MISSING_SCHEME_SYSTEMS $sym"
      fi
    else
      SCHEME_SYSTEMS="$SCHEME_SYSTEMS $sym"
    fi
  fi
}

check_versions()
{
  SCHEME_SYSTEMS=""
  MISSING_SCHEME_SYSTEMS=""

  check_min_version bigloo 3.0
  check_min_version chez 7.2 -label "Chez Scheme"
  check_min_version chicken 2.608
  check_min_version gambit "4.0.0"
  check_min_version gauche 0.8.7
  check_min_version guile 1.6.7
  check_min_version ikarus 0.0.3
  check_min_version kawa 1.9.2
  check_min_version larceny 0.94
  check_min_version mit 7.7.90 -label "MIT Scheme"
  check_min_version mzscheme 352 -label "MzScheme"
  check_min_version petite 7.0 -label "Petite Chez Scheme"
  check_min_version rscheme 9999
  check_min_version scheme48 1.4
  check_min_version scm 5e3 -label "SCM"
  check_min_version scsh 0.6.7
  check_min_version sisc 1.16.6 -label "SISC"
  check_min_version stalin 9999
  check_min_version stklos 0.82 -label "STklos"
}

#------------------------------------------------------------------------------

if find_in_path "curl"; then
  PROGRAM_curl="$exe"
else
  if find_in_path "wget"; then
    PROGRAM_wget="$exe"
  fi
fi

get_web_doc() # url
{
  url="$1"
  if [ "x$PROGRAM_curl" != "x" ]; then
    "$PROGRAM_curl" -s -L "$url"
  else
    if [ "x$PROGRAM_wget" != "x" ]; then
      "$PROGRAM_wget" -q -O - "$url"
    else
      echo "Can't download web document (neither curl nor wget are available)"
      exit 1
    fi
  fi
}

download_and_install_systems()
{
  if [ "x$SYSTEMS_TO_INSTALL" != "x" ]; then
    for sym in $SYSTEMS_TO_INSTALL; do

      echo "************************************************************** $sym"

      eval "url=\"\$URL_$sym\""

      rm -rf "$root_dir/dist/$sym"
      mkdir "$root_dir/dist/$sym"

      echo "*** Downloading $sym from $url"

      eval "download_$sym"

      echo "*** Dowloaded files:"
      cd "$root_dir/dist/$sym"
      ls -l
      cd "$root_dir"

      rm -rf "$root_dir/tmp/$sym" "$root_dir/sys/$sym"
      mkdir "$root_dir/tmp/$sym" "$root_dir/sys/$sym"

      echo "*** Installing $sym"

      time eval "install_$sym"

      rm -rf "$root_dir/tmp/$sym"

    done
  fi
}

#------------------------------------------------------------------------------

web_doc_extract_link() # url, pattern, order
{
  if [ "$3" = "latest_first" ]; then
    doc_url=`get_web_doc $1 | sed -e "/$2/"'!d;q' | sed -e "s/.*[Hh][Rr][Ee][Ff]=\"//g" -e "s/\".*//g" -e "s/.* //g"`
  else
    doc_url=`get_web_doc $1 | sed -e '1!G;h;$!d' | sed -e "/$2/"'!d;q' | sed -e "s/.*[Hh][Rr][Ee][Ff]=\"//g" -e "s/\".*//g" -e "s/.* //g"`
  fi

  if echo "$doc_url" | grep "//" > /dev/null; then
    link_dir=`echo "$doc_url" | sed -e "s#[^/]*\\\$##"`
    eval "link_url=\"$doc_url\""
  else
    link_dir=`echo "$1" | sed -e "s#[^/]*\\\$##"`
    eval "link_url=\"$link_dir$doc_url\""
  fi

  link_file=`echo "$link_url" | sed -e "s#.*/##"`
}

download_dist() # system, dist_regexp, order
{
  eval "url=\"\$URL_$1\""

  web_doc_extract_link "$url" "$2" "$3"

  get_web_doc "$link_url" > "dist/$1/$link_file"
}

download_dist_latest_first() # system, dist_regexp
{
  download_dist "$1" "$2" "latest_first"
}

download_dist_oldest_first() # system, dist_regexp
{
  download_dist "$1" "$2" "oldest_first"
}

unpack_dist_and_configure_and_install() # system, file, subdir, configure_options
{
  if unpack_dist "$1" "$2" tmp; then
    configure_and_install "$1" "$3" "$4"
  fi
}

configure_and_install() # system, subdir, configure_options
{
  cd "$root_dir/tmp/$1/"$2
  ./configure "--prefix=$root_dir/sys/$1" $3
  make
  make install
  add_path "$root_dir/sys/$1/bin"
  cd "$root_dir"
}

unpack_dist() # system, dist_file, subdir
{
  cd "$3/$1"
  dist_file=`ls "$root_dir/dist/$1/"$2`
  case "$dist_file" in
    *\.tar )
      tar xf "$dist_file"
      ;;
    *\.tar\.gz | *\.tgz | *\.tar\.Z )
      gunzip -c "$dist_file" | tar xf -
      ;;
    *\.zip )
      unzip -q "$dist_file"
      ;;
    * )
      echo "unknown format"
      cd "$root_dir"
      return 1
      ;;
  esac
  cd "$root_dir"
  return 0
}

#------------------------------------------------------------------------------

HOST_PLATFORM="`uname -s`/`uname -r`/`uname -m`"

case "$1" in

  "")
    echo "This is version $SCRIPT_VERSION of the \"schemes\" script."
    echo
    echo "Usage:"
    echo "  % $0                         # get usage information"
    echo "  % $0 --query                 # list currently installed Schemes"
    echo "  % $0 --supported             # list supported Scheme systems"
    echo "  % $0 --install <system> ...  # install Scheme <system> ..."
    echo "  % $0 --install --supported   # install all systems supported"
    echo "  % $0 --install --missing     # install all systems not currently installed"
    exit 0
    ;;

  "--query")
    query_systems
    exit 0
    ;;

  "--supported")
    echo "$SYSTEMS_SUPPORTED"
    exit 0
    ;;

  "--install")

    shift

    case "$1" in
      "--supported")
        SYSTEMS_TO_INSTALL="$SYSTEMS_SUPPORTED"
        ;;
      "--missing")
        query_systems
        SYSTEMS_TO_INSTALL="$SYSTEMS_NOT_FOUND"
        ;;
      *)
        SYSTEMS_TO_INSTALL=" $@"
        ;;
    esac

    if [ "x$SYSTEMS_TO_INSTALL" != "x " ]; then
      echo
      echo "*** installing:$SYSTEMS_TO_INSTALL"
      echo
    fi

    download_and_install_systems

    echo

    export PATH="$INSTALL_PATH$PATH"

    # bigloo needs help on Mac OS X to find its shared library.
    export DYLD_LIBRARY_PATH="$root_dir/sys/bigloo/lib:$DYLD_LIBRARY_PATH" 

    query_systems
    give_installation_info

    if [ "x$SYSTEMS_TO_INSTALL" != "x " ]; then
      echo
      echo "Please set your PATH like this (in your ~/.profile for example):"
      echo
      echo "export PATH=\"$INSTALL_PATH\$PATH\""
    fi

    exit 0
    ;;

esac

#==============================================================================

(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     55814,       1131]
NotebookOptionsPosition[     54399,       1079]
NotebookOutlinePosition[     54752,       1095]
CellTagsIndexPosition[     54709,       1092]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"x_", ",", "u_", ",", "s_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x", "-", "u"}], ")"}], "^", "2"}]}], "/", 
     RowBox[{"(", 
      RowBox[{"2", "*", 
       RowBox[{"s", "^", "2"}]}], ")"}]}], "]"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sqrt", "[", 
      RowBox[{"2", "*", "Pi"}], "]"}], "*", "s"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.665613075696681*^9, 3.665613121034856*^9}, {
  3.6656131538454723`*^9, 3.6656131885059433`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"1", ",", "1", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.6656131778396053`*^9, 3.665613179849423*^9}}],

Cell[BoxData[
 FractionBox["1", 
  RowBox[{"2", " ", "\[Pi]", " ", "Sqrt"}]]], "Output",
 CellChangeTimes->{3.665613180261713*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"g1", "[", "x_", "]"}], ":=", 
  RowBox[{"0.9", "*", 
   RowBox[{"f", "[", 
    RowBox[{"x", ",", "0", ",", "1"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6656131680816174`*^9, 3.665613169064989*^9}, {
  3.665613373249914*^9, 3.665613389658513*^9}, {3.665613424200975*^9, 
  3.6656134258241377`*^9}, {3.665771838297989*^9, 3.6657718391257553`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"g2", "[", "x_", "]"}], ":=", 
   RowBox[{"0.1", "*", 
    RowBox[{"f", "[", 
     RowBox[{"x", ",", "3", ",", 
      RowBox[{"Sqrt", "[", "3", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"g1", "[", "x", "]"}], "\[Equal]", 
   RowBox[{"g2", "[", "x", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6656133871345577`*^9, 3.6656134326639757`*^9}, {
  3.6657718426523027`*^9, 3.6657718428536377`*^9}, {3.665771943797605*^9, 
  3.66577197776541*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "ifun"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Inverse functions are being used by \
\[NoBreak]\\!\\(Solve\\)\[NoBreak], so some solutions may not be found; use \
Reduce for complete solution information. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Solve/ifun\\\", ButtonNote -> \
\\\"Solve::ifun\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.665771978481374*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", "\[Rule]", 
      RowBox[{"-", "5.3716394673330345`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", "\[Rule]", "2.3716394673330345`"}], "}"}]}], "}"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      RowBox[{"x", "^", "2"}]}], "/", "2"}], "+", 
    RowBox[{"Log", "[", "0.9", "]"}]}], "\[Equal]", 
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x", "-", "3"}], ")"}], "^", "2"}]}], "/", "6"}], "-", 
    RowBox[{"Log", "[", 
     RowBox[{"Sqrt", "[", "3", "]"}], "]"}], "+", 
    RowBox[{"Log", "[", "0.1", "]"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.665771997647378*^9, 3.665772030071721*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "5.3716394673330345`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.3716394673330345`"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.665772030819234*^9, 3.665783975295644*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "5.3716394673330345`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.371639467333034`"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.665772030819234*^9, 3.665783975339142*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g1", "[", "x", "]"}], ",", 
     RowBox[{"g2", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "10"}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", "\"\<Expressions\>\""}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Red", ",", 
      RowBox[{"Line", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"2.37164", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2.37164", ",", 
           RowBox[{"g1", "[", "2.37164", "]"}]}], "}"}]}], "}"}], "]"}]}], 
     "}"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "Full"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.665613409896801*^9, 3.665613448439515*^9}, {
  3.665613478936284*^9, 3.665613552664077*^9}, {3.665613702136846*^9, 
  3.665613715070677*^9}, {3.665613817299571*^9, 3.665613843594998*^9}, {
  3.665613969478384*^9, 3.665613982821291*^9}, {3.665771865503654*^9, 
  3.665771878703926*^9}, {3.6657720407934427`*^9, 3.665772056406035*^9}, {
  3.665772110789935*^9, 3.665772126131736*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.368417, 0.506779, 0.709798], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
6tHW0zbD050skDFH+/nG4zp0x+zj+IUhFqh5x8b2NvoJ1W3QnutZPPHH2zRG
zlSjs2Zu835rLHD7fCRJv1E16reVuii0xQLfvfh0+cL3KjTv9Nyq218WyGJy
22+6thL9GxO4y4xjhW/4CrvssXI0/vTb/VpWVshr6L4S+185eqah49CaixVe
j1DXutZbhhptcROVCbFC/ozZYYf1UrTQrILKUJ4VVh6+X/HT/Iiqbo3SHCqx
Qr7TCu/2p0vQoRgS+myUFabtzr4qCCxByRr0mDY1WWEbi07vfOgH1Pz0IleC
GSvcMP1QNVxXiH69vRidcZsVPrjimGFGUYhKpi7+K7JhhZmvTccUjN6jR1RL
v1pcWCGe4+xo2lE+mra49PE4+ITvg3VV14dvURLhZRG6CFbYYkRGI/g7D3W8
uZzCFcMKDSy+07kY5aHK7csP5VJYoc8Vjq/PlXLRkaKVK47vWWHwhbHSkrPZ
qOrcSp13CSuMr7uVy1aShRbwr55/UsEK02ntHvldzEL9nq+yZRBYYXeIXuuR
bibK9WBtqr+XFY77zRYxom/QwPw1o5khVmgvUaHL7f4anZ9a+7Y+zgqt6P/S
8xalo9XX1oto51lhipPtuWfnX6E35P74XjpihdWaYiHM916gmNOfZV1iNlh7
3qut8msqeib3z21zCjaouuZ301MoFd1j21D3xrHBgMenbk0sJKMpuxtMRSJs
8OLF/7hbcxPR4/ObobXibHBL5FRpHl8iame/uftNig1q2stk/0pNQBWGN8en
Fdng1cM+vOKLeHSgdiuf8yobDHnruERNiEXRzS1esWtscJbskXeXXiyad3b7
uex1Nqg32DZV1/wc9Xy17alrxQYprwalnBF9hrI+2rkU6skGJUNyPM8JRKEB
lTvlcX5scCzhbXuVw1N0dnXn9JvHbNB2u118sDoSLb+9S18byQaz+A1T7thE
oIaX9obX0k/qXZ38W7/yBC2tXn6Xl8UGQwfdL3y+8wTFSU95W7xlg+ylDePk
46FoO38rW1sJGxQ5GDgnMByCqh2lGeQ1ssHTY40zvttBaJZ7rKBFCxuMksSW
S0OCUKKl0DWWDja4MSaAy2UNQuuHnWOCBtjgUYJsmQcaiCpUge/mC2wQn0Md
LWH5EE2UkktlWWWDFud+tnfnBKAbuWfutm6wQaWjVaHDFX/0QyITueIRGzyO
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
R/hfPxXuVDsuX3CA
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.880722, 0.611041, 0.142051], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
        "]]}}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Epilog -> {
       RGBColor[1, 0, 0], 
       LineBox[{{2.37164, 0}, {2.37164, 0.0215660018300856}}]}, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None}, 
     PlotRange -> {{-5, 10}, {6.925159963472213*^-23, 0.35904713840003516`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
       RowBox[{"g1", "(", "x", ")"}], 
       RowBox[{"g2", "(", "x", ")"}]}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm]}], "}"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.665613595234187*^9, {3.665613710060617*^9, 3.665613719890306*^9}, 
   3.6656138458310747`*^9, 3.6656140182778788`*^9, {3.665771882001009*^9, 
   3.66577188497064*^9}, 3.6657719281018877`*^9, 3.66577206034904*^9, {
   3.6657721181953287`*^9, 3.665772127332644*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.665613590698328*^9, 3.6656136018770514`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"g1", "[", "x", "]"}], "\[Equal]", 
   RowBox[{"g2", "[", "x", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.665613462444353*^9, 3.665613465896311*^9}, {
  3.6656136227230577`*^9, 3.6656136806479387`*^9}, {3.665613891094418*^9, 
  3.665613963487604*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "ifun"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Inverse functions are being used by \
\[NoBreak]\\!\\(Solve\\)\[NoBreak], so some solutions may not be found; use \
Reduce for complete solution information. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Solve/ifun\\\", ButtonNote -> \
\\\"Solve::ifun\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{
  3.665613651632037*^9, 3.6656136833632717`*^9, {3.665613900588667*^9, 
   3.665613926683161*^9}, 3.665613964397214*^9, 3.665784018547214*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "5.3716394673330345`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.3716394673330345`"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.665784018550757*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sin", 
  RowBox[{"(", "x", ")"}]}]], "Input",
 CellChangeTimes->{{3.665784053112784*^9, 3.665784056994029*^9}}],

Cell[BoxData[
 RowBox[{"sin", " ", "x"}]], "Output",
 CellChangeTimes->{3.6657840601625023`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Sin", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.665784065119811*^9, 3.665784071953697*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sin", "[", "3.0", "]"}]], "Input",
 CellChangeTimes->{{3.6657846292746897`*^9, 3.6657846295878487`*^9}}],

Cell[BoxData["0.1411200080598672`"], "Output",
 CellChangeTimes->{3.665784630488615*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["Pi"], "Input",
 CellChangeTimes->{{3.665794135862425*^9, 3.6657941360601397`*^9}}],

Cell[BoxData["\[Pi]"], "Output",
 CellChangeTimes->{3.665794137438739*^9}]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{{3.665784010598654*^9, 3.66578402282866*^9}}]
},
WindowSize->{1366, 720},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (June 27, \
2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 610, 19, 28, "Input"],
Cell[CellGroupData[{
Cell[1193, 43, 155, 3, 28, "Input"],
Cell[1351, 48, 130, 3, 50, "Output"]
}, Open  ]],
Cell[1496, 54, 385, 8, 28, "Input"],
Cell[CellGroupData[{
Cell[1906, 66, 569, 15, 63, "Input"],
Cell[2478, 83, 531, 11, 24, "Message"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3046, 99, 836, 26, 63, InheritFromParent],
Cell[3885, 127, 306, 9, 28, "Output"],
Cell[4194, 138, 305, 9, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4536, 152, 1172, 29, 28, "Input"],
Cell[5711, 183, 46305, 814, 395, "Output"]
}, Open  ]],
Cell[52031, 1000, 94, 1, 28, "Input"],
Cell[CellGroupData[{
Cell[52150, 1005, 316, 7, 28, "Input"],
Cell[52469, 1014, 652, 13, 24, "Message"],
Cell[53124, 1029, 284, 9, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53445, 1043, 135, 3, 28, "Input"],
Cell[53583, 1048, 96, 2, 28, "Output"]
}, Open  ]],
Cell[53694, 1053, 122, 2, 28, "Input"],
Cell[CellGroupData[{
Cell[53841, 1059, 128, 2, 28, InheritFromParent],
Cell[53972, 1063, 88, 1, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54097, 1069, 96, 1, 28, "Input"],
Cell[54196, 1072, 74, 1, 28, "Output"]
}, Open  ]],
Cell[54285, 1076, 110, 1, 46, InheritFromParent]
}
]
*)

(* End of internal cache information *)
